evanspay.pythonanywhere.com

private public and partner API

 python -m venv env
source env/Scripts/activate
pip install django
django-admin starproject
for this project i installed python extension pack by 

Don Jayamanne

i also installed Tabnine: AI Autocomplete & Chat for Javascript,
 Python, Typescript, PHP, Go, Java & more
v3.97.0
TabNine
reload vs code after installation

to install django rest framwork
pip install django restframework


register rest_framework in installed apps 

https://www.django-rest-framework.org

to move an entire block of code hightlight and press ctrl ] and to move backwards use[

to comment entire lines of code use ctrl and / and to uncomment do the same



evanspay.pythonanywhere.com

private public and partner API

 python -m venv env
source env/Scripts/activate
pip install django
django-admin starproject
for this project i installed python extension pack by 

Don Jayamanne
cccc
i also installed Tabnine: AI Autocomplete & Chat for Javascript,jnnnnnnnnnn......
 Python, Typescript, PHP, Go, Java & 
v3.97.0                 ,
TabNine
reload vs code after installation

Serializers are used to convert complex data types, such as queryset instances or model instances, into native Python data types that can be easily rendered into JSON, XML, or other content types.
They are primarily used for converting database records (e.g., Django model instances) into JSON data that can be sent over the network as a response to an API request.
Serializers also handle validation of incoming data during deserialization (i.e., converting request data into Python objects).
Deserializers:
Deserializers, sometimes referred to as parsers, are used for the opposite operation of serializers. They convert incoming request data (e.g., JSON or XML) into native Python data types that can be processed by Django views and stored in the database.
Deserializers are used primarily for handling incoming data in API requests and converting it into Django model instances or other Python objects that can be saved to the database.
Deserializers also handle validation of incoming data to ensure it meets the requirements specified by the application's data models.



ctrl and / would comment everything

many to many relationship
many to one relationship
one to one relationship

if you have this message after editing your model and running migration 
Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit and manually define a default value in models.py.

 press 1 and then type None



 POSTMAN 
 GO to POSTMAN.com and create a free account

 evansboma@gmail.com
 bmeva
Nedva@5412345

search for POSTMAN download and download the app then signin

on postman you can do everything you do on the browsable API
for example you can type http://127.0.0.1:8000/streamviewset/4 in the search field
if you go to headers you can see everything that you need to do such as post, delete, patch, put etc

to update go to 

http://127.0.0.1:8000/streamviewset/4/ Note that if you dont add /after the id (4) it would give an error

it would display this 
{
    "id": 4,
    "name": "Netflix",
    "about": "The netflix",
    "website": "http://mevab.com"
}


then select put then select body then raw and select json
then type 

{
    "name": "Netflix",
    "about": "The netflix updated",
    "website": "http://mevab.com"
}

TO SEND A POST REQUEST GO TO http://127.0.0.1:8000/streamviewset/
CHANGE IT BACK TO GET WHICH would list all the stream list and then click on send

type 
{
    "name": "DaZone",
    "about": "The nedazone site",
    "website": "http://mevab.com"
}
change it to POST

then click on post to add new watchlist


to delete go to the url http://127.0.0.1:8000/streamviewset/5/
then click get and click send to display it

then select delete and click send